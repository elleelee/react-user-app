{"version":3,"sources":["containers/user_list_filter.jsx","actions/filter.js","components/navbar.jsx","firebase/firebase.js","actions/index.js","containers/app.jsx","containers/user.jsx","selectors/users.js","containers/user_list.jsx","containers/user_dashboard.jsx","components/footer.jsx","App.js","serviceWorker.js","reducers/users_reducer.js","reducers/filter_reducer.js","index.js","reducers/accounts_reducer.js","reducers/selected_user_reducer.js"],"names":["connect","state","filter","props","className","id","placeholder","type","value","text","onChange","e","dispatch","setTextFilter","target","Navbar","onClick","window","location","reload","src","alt","this","Component","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","selectUser","user","App","appName","appTitle","User","handleClick","containerClasses","selectedUser","flipOnHover","flipOnClick","flipDirection","ref","r","flippy","style","height","backgroundColor","borderRadius","display","flexDirection","alignItems","childData","account","name","color","apps","map","app","Object","values","key","title","bindActionCreators","users","toLowerCase","includes","UserList","startSetUsers","startSetAccounts","marginBottom","fontSize","accountSelected","accountDataSelected","accounts","push","appNames","keys","appTitles","selectUsers","on","snapshot","forEach","childSnapshot","val","setUsers","setAccounts","UserDashboard","Footer","href","rel","Boolean","hostname","match","filterReducerDefaultState","reducers","combineReducers","action","undefined","middlewares","applyMiddleware","thunk","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.300fbb1d.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from 'react-redux';\nimport { setTextFilter } from '../actions/filter';\n\n\nconst UserListFilter = (props) => (\n  <div className=\"search-input\">\n    <i className=\"fas fa-search\" id=\"search-icon\"></i>\n    <input className=\"form-control\" id=\"input\" placeholder=\"Search by User Name\" type=\"text\" value={props.filter.text} onChange={(e) => {\n        props.dispatch(setTextFilter(e.target.value));\n      }} />\n  </div>\n);\n\nconst mapStateToProps = (state) => {\n  return {\n    filter: state.filter\n  };\n};\n\nexport default connect(mapStateToProps)(UserListFilter);\n","export const setTextFilter = (text = '') => ({\n  type: 'SET_TEXT_FILTER',\n  text\n});\n","import React, { Component } from \"react\";\nimport UserListFilter from \"../containers/user_list_filter\";\n\n\nclass Navbar extends Component {\n\n  onClick = () => {\n    window.location.reload();\n  };\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-light bg-light\">\n        <div className=\"navbar-brand\" >\n          <div className=\"nav-left\">\n            <div className=\"nav-left-content\">\n              <img src=\"brand-logo.svg\" alt=\"\" id=\"nav-icon\" onClick={this.onClick} />\n            </div>\n          </div>\n          <div className=\"nav-right\">\n            <UserListFilter />\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import * as firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n};\n\nfirebase.initializeApp(config);\n\nconst database = firebase.database();\n\nexport { firebase, database as default };\n","import database from '../firebase/firebase';\n\nexport function setUsers(users) {\n  return {\n    type: 'SET_USERS',\n    users\n  };\n}\n\nexport function startSetUsers() {\n  return (dispatch) => {\n    return database.ref('users').on('value', (snapshot) => {\n     const users =[];\n     snapshot.forEach((childSnapshot) => {\n       const key = childSnapshot.key;\n       const childData = childSnapshot.val();\n       users.push({\n         key,\n         childData\n       });\n     });\n      dispatch(setUsers(users));\n    });\n  };\n}\n\n\nexport function setAccounts(accounts) {\n  return {\n    type: 'SET_ACCOUNTS',\n    accounts\n  };\n}\n\nexport function startSetAccounts() {\n  return (dispatch) => {\n    return database.ref('accounts').on('value', (snapshot) => {\n     const accounts =[];\n     snapshot.forEach((childSnapshot) => {\n       const key = childSnapshot.key;\n       const childData = childSnapshot.val();\n       accounts.push({\n         key,\n         childData\n       });\n     });\n      dispatch(setAccounts(accounts));\n    });\n  };\n}\n\nexport function selectUser(user) {\n  return {\n    type: \"SELECT_USER\",\n    user\n  };\n}\n","import React, { Component } from \"react\";\n\nclass App extends Component {\n\n  render() {\n    const props = this.props;\n\n    return (\n      <div className=\"app-card\">\n        <div className=\"app-card-avatar\">\n          <img src=\"app-card.svg\" alt=\"\"/>\n        </div>\n        <div className=\"app-card-content\">\n          <h4>App: <span className=\"text-bold\">{props.appName}</span></h4>\n          <h5>{props.appTitle}</h5>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { selectUser } from \"../actions/index\";\nimport Flippy, { FrontSide, BackSide } from 'react-flippy';\nimport App from \"../containers/app\";\n\n\nclass User extends Component {\n\n  handleClick = () => {\n    this.props.selectUser(this.props.user);\n  };\n\n  render() {\n    const props = this.props;\n\n    let containerClasses = \"user-card\";\n    if (this.props.user === this.props.selectedUser) {\n      containerClasses += \" selected\";\n    }\n\n    return (\n      <div className={containerClasses} onClick={this.handleClick} >\n          <Flippy\n          flipOnHover={false} // default false\n          flipOnClick={true} // default false\n          flipDirection=\"horizontal\" // horizontal or vertical\n          ref={(r) => this.flippy = r}\n          style={{ height: '280px' }}>\n\n           <FrontSide style={{backgroundColor: '#ffc5a1', borderRadius: '5px', display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n            <h5 className=\"text-white\">Account ID: <span className=\"text-bold\">{props.user.childData.account}</span></h5>\n            <img src=\"user-avatar.svg\" alt=\"\" className=\"user-card-svg\"/>\n            <h5 className=\"text-bold margin_top\">USER NAME</h5>\n            <h3 className=\"text-grey\" id=\"margin-bottom-none\">{props.user.childData.name}</h3>\n          </FrontSide>\n\n            <BackSide style={{backgroundColor: '#3f847c', borderRadius: '5px', color: 'white'}}>\n              <div className=\"app-cards\">\n                {props.apps.map((app) => {\n                  const appName = Object.values(app)[0];\n                  const appTitle = Object.values(app)[1];\n                  return <App key={appName} appName={appName[0]} appTitle={appTitle[0].title} />\n                })}\n              </div>\n            </BackSide>\n          </Flippy>\n        </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedUser: state.selectedUser\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ selectUser }, dispatch);\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(User);\n","export default (users, { text }) => {\n  return users.filter((user) => {\n    const textMatch = user.childData.name.toLowerCase().includes(text.toLowerCase());\n    return textMatch;\n  });\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport User from \"../containers/user\";\nimport { startSetUsers } from \"../actions/index\";\nimport { startSetAccounts } from \"../actions/index\";\nimport selectUsers from '../selectors/users';\n\n\nclass UserList extends Component {\n\n  UNSAFE_componentWillMount() {\n    this.props.startSetUsers();\n    this.props.startSetAccounts();\n  }\n\n  render() {\n    const props = this.props;\n    return (\n      <div className=\"container\" id=\"container-padding\">\n        <h1 style={{marginBottom: '20px'}}>User Dashboard</h1>\n        <p style={{fontSize: '20px', color: '#424444'}}>Click on the user to see associated account-app name and title</p>\n        <div className=\"user-list\">\n          {props.users.map((user) => {\n            const accountSelected = [];\n            const accountDataSelected = [];\n            {props.accounts.map((account) => {\n              if (user.childData.account === account.key) {\n                accountSelected.push(account.childData.apps);\n                accountSelected.map((apps) => {\n                  const appNames = Object.keys(apps);\n                  const appTitles = Object.values(apps);\n                  return accountDataSelected.push({appNames, appTitles});\n                })\n              }\n              return accountSelected;\n            })}\n            return <User key={user.childData.name} user={user} account={accountSelected} apps={accountDataSelected} />;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    users: selectUsers(state.users, state.filter),\n    accounts: state.accounts\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  startSetUsers: (user) => dispatch(startSetUsers(user)),\n  startSetAccounts: (account) => dispatch(startSetAccounts(account))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserList);\n","import React from \"react\";\nimport UserList from \"../containers/user_list\";\n\nconst UserDashboard = () => (\n  <div>\n    <UserList />\n  </div>\n)\n\nexport default UserDashboard;\n","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n\n  render() {\n    return (\n      <div className=\"footer\">\n        <div className=\"footer-links\">\n          <a href=\"https://github.com/elleelee\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fab fa-github\"></i></a>\n          <a href=\"https://www.instagram.com/\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fab fa-instagram\"></i></a>\n          <a href=\"https://www.linkedin.com/in/ellenleelbs/\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fab fa-linkedin\"></i></a>\n        </div>\n        <div className=\"footer-copyright\">\n          <img src=\"web-app.svg\" alt=\"\" className=\"footer-img\"/>\n          This web app is made by Ellen Lee\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React from 'react';\nimport Navbar from \"./components/navbar\";\nimport UserDashboard from \"./containers/user_dashboard\";\nimport Footer from \"./components/footer\";\n\n\nconst App = () => {\n  return (\n    <div>\n      <Navbar />\n      <UserDashboard />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default function(state, action) {\n\n  if (state === undefined) {\n    return [];\n  }\n\n  switch (action.type) {\n    case \"SET_USERS\":\n      return action.users;\n    default:\n      return state;\n  }\n}\n","const filterReducerDefaultState = {\n  text: ''\n};\n\nexport default (state = filterReducerDefaultState, action) => {\n\n  switch (action.type) {\n    case 'SET_TEXT_FILTER':\n      return {\n        ...state,\n        text: action.text\n      };\n    default:\n      return state;\n  }\n};\n","// external modules\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from 'redux-thunk';\n\n// internal modules\nimport \"./stylesheets/index.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Reducers\nimport usersReducer from \"./reducers/users_reducer\";\nimport accountsReducer from \"./reducers/accounts_reducer\";\nimport selectedUserReducer from \"./reducers/selected_user_reducer\";\nimport filterReducer from \"./reducers/filter_reducer\";\n\n\nconst reducers = combineReducers({\n  users: usersReducer,\n  accounts: accountsReducer,\n  selectedUser: selectedUserReducer,\n  filter: filterReducer\n});\n\n// Middlewares\nconst middlewares = applyMiddleware(thunk);\nconst store = createStore(reducers, middlewares);\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default function(state, action) {\n\n  if (state === undefined) {\n    return [];\n  }\n\n  switch (action.type) {\n    case \"SET_ACCOUNTS\":\n      return action.accounts;\n    default:\n      return state;\n  }\n}\n","export default function(state, action) {\n\n  if (state === undefined) {\n    return null;\n  }\n\n  switch (action.type) {\n    case \"SELECT_USER\":\n      return action.user;\n    default:\n      return state;\n  }\n}\n"],"sourceRoot":""}